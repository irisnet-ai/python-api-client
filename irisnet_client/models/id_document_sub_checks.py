# coding: utf-8

"""
    Irisnet API

    Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.

    The version of the OpenAPI document: v2
    Contact: info@irisnet.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdDocumentSubChecks(BaseModel):
    """
    Contains information on idDocument sub-checks
    """ # noqa: E501
    mrz_checksum: Optional[StrictStr] = Field(default=None, description="Indicates whether the MRZ checksum is correct", alias="mrzChecksum")
    mrz_format: Optional[StrictStr] = Field(default=None, description="Indicates whether the MRZ format is correct", alias="mrzFormat")
    mrz_consistency: Optional[StrictStr] = Field(default=None, description="Indicates whether the MRZ is consistent with the document type", alias="mrzConsistency")
    expiration_date: Optional[StrictStr] = Field(default=None, description="Indicates whether the expirationDate is valid", alias="expirationDate")
    security_elements: Optional[StrictStr] = Field(default=None, description="Indicates whether the document's security elements are valid", alias="securityElements")
    photo_location: Optional[StrictStr] = Field(default=None, description="Indicates whether the photo is in the correct location for a given document type", alias="photoLocation")
    blacklist_check: Optional[StrictStr] = Field(default=None, description="Indicates whether a competent authority deny-listed the ID document", alias="blacklistCheck")
    photocopy_check: Optional[StrictStr] = Field(default=None, description="Indicates whether the document is a photocopy", alias="photocopyCheck")
    specimen_check: Optional[StrictStr] = Field(default=None, description="Indicates whether the document has been copied from the Internet", alias="specimenCheck")
    document_model_identification: Optional[StrictStr] = Field(default=None, description="Indicates whether the document model has been identified and whether or not the document conforms to official specifications", alias="documentModelIdentification")
    document_liveness_check: Optional[StrictStr] = Field(default=None, description="Indicates if the document image is genuine and not a photo of an image or of a screen", alias="documentLivenessCheck")
    data_integrity_check: Optional[StrictStr] = Field(default=None, description="Indicates whether the data fields contain the correct type of content", alias="dataIntegrityCheck")
    data_consistency_check: Optional[StrictStr] = Field(default=None, description="Indicates whether the information on both sides of the document is consistent", alias="dataConsistencyCheck")
    age_validation_check: Optional[StrictStr] = Field(default=None, description="Indicates if the extracted age is greater than or equal to a predefined minimum accepted age", alias="ageValidationCheck")
    spoofed_image_analysis: Optional[StrictStr] = Field(default=None, description="Indicates whether the selfie image is spoofed, copied from the Internet, or is a known deny-listed image", alias="spoofedImageAnalysis")
    face_liveness_check: Optional[StrictStr] = Field(default=None, description="Indicates if the selfie image is genuine and not a photo of an image or of a screen", alias="faceLivenessCheck")
    voice_challenge_check: Optional[StrictStr] = Field(default=None, description="Indicates if the enduser had answered correctly during the voice challenge", alias="voiceChallengeCheck")
    action_challenge_check: Optional[StrictStr] = Field(default=None, description="Indicates if the enduser had moved correctly during the actions challenge", alias="actionChallengeCheck")
    first_name_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the first name on the document and the MRZ are consistent", alias="firstNameConsistency")
    last_name_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the last name on the document and the MRZ are consistent", alias="lastNameConsistency")
    dob_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the date of birth on the document and the MRZ are consistent", alias="dobConsistency")
    document_number_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the document number on the document and the MRZ are consistent", alias="documentNumberConsistency")
    issuing_date_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the issuing date on the document and the MRZ are consistent", alias="issuingDateConsistency")
    expiration_date_consistency: Optional[StrictStr] = Field(default=None, description="Indicates if the expiration date on the document and the MRZ are consistent", alias="expirationDateConsistency")
    known_faces_check: Optional[StrictStr] = Field(default=None, description="Indicates if the selfie image matches an aready existing client/customer", alias="knownFacesCheck")
    __properties: ClassVar[List[str]] = ["mrzChecksum", "mrzFormat", "mrzConsistency", "expirationDate", "securityElements", "photoLocation", "blacklistCheck", "photocopyCheck", "specimenCheck", "documentModelIdentification", "documentLivenessCheck", "dataIntegrityCheck", "dataConsistencyCheck", "ageValidationCheck", "spoofedImageAnalysis", "faceLivenessCheck", "voiceChallengeCheck", "actionChallengeCheck", "firstNameConsistency", "lastNameConsistency", "dobConsistency", "documentNumberConsistency", "issuingDateConsistency", "expirationDateConsistency", "knownFacesCheck"]

    @field_validator('mrz_checksum')
    def mrz_checksum_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('mrz_format')
    def mrz_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('mrz_consistency')
    def mrz_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('expiration_date')
    def expiration_date_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('security_elements')
    def security_elements_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('photo_location')
    def photo_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('blacklist_check')
    def blacklist_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('photocopy_check')
    def photocopy_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('specimen_check')
    def specimen_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('document_model_identification')
    def document_model_identification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('document_liveness_check')
    def document_liveness_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('data_integrity_check')
    def data_integrity_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('data_consistency_check')
    def data_consistency_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('age_validation_check')
    def age_validation_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('spoofed_image_analysis')
    def spoofed_image_analysis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('face_liveness_check')
    def face_liveness_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('voice_challenge_check')
    def voice_challenge_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('action_challenge_check')
    def action_challenge_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('first_name_consistency')
    def first_name_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('last_name_consistency')
    def last_name_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('dob_consistency')
    def dob_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('document_number_consistency')
    def document_number_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('issuing_date_consistency')
    def issuing_date_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('expiration_date_consistency')
    def expiration_date_consistency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    @field_validator('known_faces_check')
    def known_faces_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'not_processed']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'not_processed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdDocumentSubChecks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdDocumentSubChecks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mrzChecksum": obj.get("mrzChecksum"),
            "mrzFormat": obj.get("mrzFormat"),
            "mrzConsistency": obj.get("mrzConsistency"),
            "expirationDate": obj.get("expirationDate"),
            "securityElements": obj.get("securityElements"),
            "photoLocation": obj.get("photoLocation"),
            "blacklistCheck": obj.get("blacklistCheck"),
            "photocopyCheck": obj.get("photocopyCheck"),
            "specimenCheck": obj.get("specimenCheck"),
            "documentModelIdentification": obj.get("documentModelIdentification"),
            "documentLivenessCheck": obj.get("documentLivenessCheck"),
            "dataIntegrityCheck": obj.get("dataIntegrityCheck"),
            "dataConsistencyCheck": obj.get("dataConsistencyCheck"),
            "ageValidationCheck": obj.get("ageValidationCheck"),
            "spoofedImageAnalysis": obj.get("spoofedImageAnalysis"),
            "faceLivenessCheck": obj.get("faceLivenessCheck"),
            "voiceChallengeCheck": obj.get("voiceChallengeCheck"),
            "actionChallengeCheck": obj.get("actionChallengeCheck"),
            "firstNameConsistency": obj.get("firstNameConsistency"),
            "lastNameConsistency": obj.get("lastNameConsistency"),
            "dobConsistency": obj.get("dobConsistency"),
            "documentNumberConsistency": obj.get("documentNumberConsistency"),
            "issuingDateConsistency": obj.get("issuingDateConsistency"),
            "expirationDateConsistency": obj.get("expirationDateConsistency"),
            "knownFacesCheck": obj.get("knownFacesCheck")
        })
        return _obj


