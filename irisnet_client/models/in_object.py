# coding: utf-8

"""
    Irisnet API

    Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses.By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.    # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from irisnet_client.configuration import Configuration


class INObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'in_class': 'str',
        'x0': 'float',
        'y0': 'float',
        'width': 'float',
        'height': 'float',
        'probability': 'int'
    }

    attribute_map = {
        'in_class': 'inClass',
        'x0': 'x0',
        'y0': 'y0',
        'width': 'width',
        'height': 'height',
        'probability': 'probability'
    }

    def __init__(self, in_class=None, x0=None, y0=None, width=None, height=None, probability=None, local_vars_configuration=None):  # noqa: E501
        """INObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._in_class = None
        self._x0 = None
        self._y0 = None
        self._width = None
        self._height = None
        self._probability = None
        self.discriminator = None

        if in_class is not None:
            self.in_class = in_class
        if x0 is not None:
            self.x0 = x0
        if y0 is not None:
            self.y0 = y0
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if probability is not None:
            self.probability = probability

    @property
    def in_class(self):
        """Gets the in_class of this INObject.  # noqa: E501

        The classification of the recognized object.  # noqa: E501

        :return: The in_class of this INObject.  # noqa: E501
        :rtype: str
        """
        return self._in_class

    @in_class.setter
    def in_class(self, in_class):
        """Sets the in_class of this INObject.

        The classification of the recognized object.  # noqa: E501

        :param in_class: The in_class of this INObject.  # noqa: E501
        :type: str
        """

        self._in_class = in_class

    @property
    def x0(self):
        """Gets the x0 of this INObject.  # noqa: E501

        The starting point of the rectangle in the vertical (x) direction.  # noqa: E501

        :return: The x0 of this INObject.  # noqa: E501
        :rtype: float
        """
        return self._x0

    @x0.setter
    def x0(self, x0):
        """Sets the x0 of this INObject.

        The starting point of the rectangle in the vertical (x) direction.  # noqa: E501

        :param x0: The x0 of this INObject.  # noqa: E501
        :type: float
        """

        self._x0 = x0

    @property
    def y0(self):
        """Gets the y0 of this INObject.  # noqa: E501

        The starting point of the rectangle in the horizontal (y) direction.  # noqa: E501

        :return: The y0 of this INObject.  # noqa: E501
        :rtype: float
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this INObject.

        The starting point of the rectangle in the horizontal (y) direction.  # noqa: E501

        :param y0: The y0 of this INObject.  # noqa: E501
        :type: float
        """

        self._y0 = y0

    @property
    def width(self):
        """Gets the width of this INObject.  # noqa: E501

        The distance from the starting point (y0) to end the rectangle in the horizontal direction.  # noqa: E501

        :return: The width of this INObject.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this INObject.

        The distance from the starting point (y0) to end the rectangle in the horizontal direction.  # noqa: E501

        :param width: The width of this INObject.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this INObject.  # noqa: E501

        The distance from the starting point (x0) to end the rectangle in the vertical direction.  # noqa: E501

        :return: The height of this INObject.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this INObject.

        The distance from the starting point (x0) to end the rectangle in the vertical direction.  # noqa: E501

        :param height: The height of this INObject.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def probability(self):
        """Gets the probability of this INObject.  # noqa: E501

        The probability that the object found matches the classification.  # noqa: E501

        :return: The probability of this INObject.  # noqa: E501
        :rtype: int
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this INObject.

        The probability that the object found matches the classification.  # noqa: E501

        :param probability: The probability of this INObject.  # noqa: E501
        :type: int
        """

        self._probability = probability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, INObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, INObject):
            return True

        return self.to_dict() != other.to_dict()
