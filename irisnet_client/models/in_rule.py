# coding: utf-8

"""
    Irisnet API

    Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.    # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from irisnet_client.configuration import Configuration


class INRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'in_class': 'str',
        'in_group': 'str',
        'found': 'int',
        'min': 'int',
        'max': 'int',
        'severity': 'int'
    }

    attribute_map = {
        'in_class': 'inClass',
        'in_group': 'inGroup',
        'found': 'found',
        'min': 'min',
        'max': 'max',
        'severity': 'severity'
    }

    def __init__(self, in_class=None, in_group=None, found=None, min=None, max=None, severity=None, local_vars_configuration=None):  # noqa: E501
        """INRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._in_class = None
        self._in_group = None
        self._found = None
        self._min = None
        self._max = None
        self._severity = None
        self.discriminator = None

        if in_class is not None:
            self.in_class = in_class
        if in_group is not None:
            self.in_group = in_group
        if found is not None:
            self.found = found
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if severity is not None:
            self.severity = severity

    @property
    def in_class(self):
        """Gets the in_class of this INRule.  # noqa: E501

        The classification of the recognized object.  # noqa: E501

        :return: The in_class of this INRule.  # noqa: E501
        :rtype: str
        """
        return self._in_class

    @in_class.setter
    def in_class(self, in_class):
        """Sets the in_class of this INRule.

        The classification of the recognized object.  # noqa: E501

        :param in_class: The in_class of this INRule.  # noqa: E501
        :type: str
        """

        self._in_class = in_class

    @property
    def in_group(self):
        """Gets the in_group of this INRule.  # noqa: E501

        The group of the classification.  # noqa: E501

        :return: The in_group of this INRule.  # noqa: E501
        :rtype: str
        """
        return self._in_group

    @in_group.setter
    def in_group(self, in_group):
        """Sets the in_group of this INRule.

        The group of the classification.  # noqa: E501

        :param in_group: The in_group of this INRule.  # noqa: E501
        :type: str
        """

        self._in_group = in_group

    @property
    def found(self):
        """Gets the found of this INRule.  # noqa: E501

        The count of how many instances of the classification object were found.  # noqa: E501

        :return: The found of this INRule.  # noqa: E501
        :rtype: int
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this INRule.

        The count of how many instances of the classification object were found.  # noqa: E501

        :param found: The found of this INRule.  # noqa: E501
        :type: int
        """

        self._found = found

    @property
    def min(self):
        """Gets the min of this INRule.  # noqa: E501

        The minimum allowed instances of the classification object.  # noqa: E501

        :return: The min of this INRule.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this INRule.

        The minimum allowed instances of the classification object.  # noqa: E501

        :param min: The min of this INRule.  # noqa: E501
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this INRule.  # noqa: E501

        The maximum allowed instances of the classification object.  # noqa: E501

        :return: The max of this INRule.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this INRule.

        The maximum allowed instances of the classification object.  # noqa: E501

        :param max: The max of this INRule.  # noqa: E501
        :type: int
        """

        self._max = max

    @property
    def severity(self):
        """Gets the severity of this INRule.  # noqa: E501

        The severity of the classification object set while configuring the AI.  # noqa: E501

        :return: The severity of this INRule.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this INRule.

        The severity of the classification object set while configuring the AI.  # noqa: E501

        :param severity: The severity of this INRule.  # noqa: E501
        :type: int
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, INRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, INRule):
            return True

        return self.to_dict() != other.to_dict()
