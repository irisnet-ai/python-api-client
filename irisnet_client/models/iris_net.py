# coding: utf-8

"""
    Irisnet API

    Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.    # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from irisnet_client.configuration import Configuration


class IrisNet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rules_broken': 'int',
        'help_suggested': 'int',
        'getn_classes': 'int',
        'getn_objects': 'int',
        'in_rule': 'list[INRule]',
        'in_object': 'list[INObject]'
    }

    attribute_map = {
        'rules_broken': 'rulesBroken',
        'help_suggested': 'helpSuggested',
        'getn_classes': 'getnClasses',
        'getn_objects': 'getnObjects',
        'in_rule': 'inRule',
        'in_object': 'inObject'
    }

    def __init__(self, rules_broken=None, help_suggested=None, getn_classes=None, getn_objects=None, in_rule=None, in_object=None, local_vars_configuration=None):  # noqa: E501
        """IrisNet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rules_broken = None
        self._help_suggested = None
        self._getn_classes = None
        self._getn_objects = None
        self._in_rule = None
        self._in_object = None
        self.discriminator = None

        if rules_broken is not None:
            self.rules_broken = rules_broken
        if help_suggested is not None:
            self.help_suggested = help_suggested
        if getn_classes is not None:
            self.getn_classes = getn_classes
        if getn_objects is not None:
            self.getn_objects = getn_objects
        if in_rule is not None:
            self.in_rule = in_rule
        if in_object is not None:
            self.in_object = in_object

    @property
    def rules_broken(self):
        """Gets the rules_broken of this IrisNet.  # noqa: E501

        The amount of broken rules that are contained in the source media.  # noqa: E501

        :return: The rules_broken of this IrisNet.  # noqa: E501
        :rtype: int
        """
        return self._rules_broken

    @rules_broken.setter
    def rules_broken(self, rules_broken):
        """Sets the rules_broken of this IrisNet.

        The amount of broken rules that are contained in the source media.  # noqa: E501

        :param rules_broken: The rules_broken of this IrisNet.  # noqa: E501
        :type: int
        """

        self._rules_broken = rules_broken

    @property
    def help_suggested(self):
        """Gets the help_suggested of this IrisNet.  # noqa: E501

        In cases where the AI is uncertain, this attribute is set (1), indication that it could be useful to double check the source media by a human.  # noqa: E501

        :return: The help_suggested of this IrisNet.  # noqa: E501
        :rtype: int
        """
        return self._help_suggested

    @help_suggested.setter
    def help_suggested(self, help_suggested):
        """Sets the help_suggested of this IrisNet.

        In cases where the AI is uncertain, this attribute is set (1), indication that it could be useful to double check the source media by a human.  # noqa: E501

        :param help_suggested: The help_suggested of this IrisNet.  # noqa: E501
        :type: int
        """

        self._help_suggested = help_suggested

    @property
    def getn_classes(self):
        """Gets the getn_classes of this IrisNet.  # noqa: E501

        The amount of classification objects that were checked against on the source media. This does not mean that all of the classifications were found.  # noqa: E501

        :return: The getn_classes of this IrisNet.  # noqa: E501
        :rtype: int
        """
        return self._getn_classes

    @getn_classes.setter
    def getn_classes(self, getn_classes):
        """Sets the getn_classes of this IrisNet.

        The amount of classification objects that were checked against on the source media. This does not mean that all of the classifications were found.  # noqa: E501

        :param getn_classes: The getn_classes of this IrisNet.  # noqa: E501
        :type: int
        """

        self._getn_classes = getn_classes

    @property
    def getn_objects(self):
        """Gets the getn_objects of this IrisNet.  # noqa: E501

        The amount of objects that were recognized on the source image.  # noqa: E501

        :return: The getn_objects of this IrisNet.  # noqa: E501
        :rtype: int
        """
        return self._getn_objects

    @getn_objects.setter
    def getn_objects(self, getn_objects):
        """Sets the getn_objects of this IrisNet.

        The amount of objects that were recognized on the source image.  # noqa: E501

        :param getn_objects: The getn_objects of this IrisNet.  # noqa: E501
        :type: int
        """

        self._getn_objects = getn_objects

    @property
    def in_rule(self):
        """Gets the in_rule of this IrisNet.  # noqa: E501

        This list contains one rule per classification. Rules for classification objects that were not found, are omitted.  # noqa: E501

        :return: The in_rule of this IrisNet.  # noqa: E501
        :rtype: list[INRule]
        """
        return self._in_rule

    @in_rule.setter
    def in_rule(self, in_rule):
        """Sets the in_rule of this IrisNet.

        This list contains one rule per classification. Rules for classification objects that were not found, are omitted.  # noqa: E501

        :param in_rule: The in_rule of this IrisNet.  # noqa: E501
        :type: list[INRule]
        """

        self._in_rule = in_rule

    @property
    def in_object(self):
        """Gets the in_object of this IrisNet.  # noqa: E501

        A list of all instances of the classification objects found on the source image.  # noqa: E501

        :return: The in_object of this IrisNet.  # noqa: E501
        :rtype: list[INObject]
        """
        return self._in_object

    @in_object.setter
    def in_object(self, in_object):
        """Sets the in_object of this IrisNet.

        A list of all instances of the classification objects found on the source image.  # noqa: E501

        :param in_object: The in_object of this IrisNet.  # noqa: E501
        :type: list[INObject]
        """

        self._in_object = in_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IrisNet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IrisNet):
            return True

        return self.to_dict() != other.to_dict()
