# coding: utf-8

"""
    Irisnet API

    Artificial Intelligence (AI) for image- and video-processing in realtime. This is an interactive documentation meant to give a place were you can quickly look up the endpoints and their schemas, while also giving you the option to try things out yourself.  Listed below you'll see the available endpoints of the API that can be expanded by clicking on it. Each expanded endpoint lists the request parameter (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail. Additionally you'll find a 'Try it out' button where you can type in your custom parameters and custom body and execute that against the API. The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. By clicking on the right arrow you can expand the model and it will show you a description of the model and the model parameters. For nested models you can keep clicking the right arrow to reveal further details on it.    # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from irisnet_client.configuration import Configuration


class LicenseInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credits_used': 'int',
        'credits_remaining': 'int',
        'total_credits': 'int'
    }

    attribute_map = {
        'credits_used': 'creditsUsed',
        'credits_remaining': 'creditsRemaining',
        'total_credits': 'totalCredits'
    }

    def __init__(self, credits_used=None, credits_remaining=None, total_credits=None, local_vars_configuration=None):  # noqa: E501
        """LicenseInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._credits_used = None
        self._credits_remaining = None
        self._total_credits = None
        self.discriminator = None

        if credits_used is not None:
            self.credits_used = credits_used
        if credits_remaining is not None:
            self.credits_remaining = credits_remaining
        if total_credits is not None:
            self.total_credits = total_credits

    @property
    def credits_used(self):
        """Gets the credits_used of this LicenseInfo.  # noqa: E501

        Credits used for the license key.  # noqa: E501

        :return: The credits_used of this LicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._credits_used

    @credits_used.setter
    def credits_used(self, credits_used):
        """Sets the credits_used of this LicenseInfo.

        Credits used for the license key.  # noqa: E501

        :param credits_used: The credits_used of this LicenseInfo.  # noqa: E501
        :type: int
        """

        self._credits_used = credits_used

    @property
    def credits_remaining(self):
        """Gets the credits_remaining of this LicenseInfo.  # noqa: E501

        Credits remaining for the license key.  # noqa: E501

        :return: The credits_remaining of this LicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._credits_remaining

    @credits_remaining.setter
    def credits_remaining(self, credits_remaining):
        """Sets the credits_remaining of this LicenseInfo.

        Credits remaining for the license key.  # noqa: E501

        :param credits_remaining: The credits_remaining of this LicenseInfo.  # noqa: E501
        :type: int
        """

        self._credits_remaining = credits_remaining

    @property
    def total_credits(self):
        """Gets the total_credits of this LicenseInfo.  # noqa: E501

        Total credits contained within the license.  # noqa: E501

        :return: The total_credits of this LicenseInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_credits

    @total_credits.setter
    def total_credits(self, total_credits):
        """Sets the total_credits of this LicenseInfo.

        Total credits contained within the license.  # noqa: E501

        :param total_credits: The total_credits of this LicenseInfo.  # noqa: E501
        :type: int
        """

        self._total_credits = total_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseInfo):
            return True

        return self.to_dict() != other.to_dict()
